#pragma once

/*
*	print.h:
*		Facilitates the monitoring of a printjob, and serves as the calling
*		class for the sending of commands to the printer via RAMBoInterface.h
********************************************************************************
*	This file is part of PrintCheck3D
*	Copyright(C) 2019 Stephen Donchez, Jared Rymsza, Robert Pink
*
*	This program is free software : you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation, either version 3 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License
*	along with this program.If not, see < https://www.gnu.org/licenses/>.
*******************************************************************************/
using namespace std;
#include <stdio.h>
#include <string>
#include "../vendor/raspicam/src/raspicam_cv.h"
#include "photogate.h"
#include "RAMBoInterface.h"
#include <unistd.h>
class print
{
public:

/*
* print: sets up the various functionalities required to manage a print. Defines
*	a file to store the current image from the camera, as well as the current 
*	model state. Also starts GCode transfer, and tells the webserver that
*	printing has commenced
*/
	print(RAMBoInterface *printerInterface);

/*
* ~print: tears down the file pointers and buffers created by the constructor.
*	also closes the serial connection, and informs the webserver that the
*	printer is no longer in use.
*/
	~print();

/* 
* monitorPrint: loops through a process of checking the status of the printer,
*	comparing it to the expected appearence of the print, and taking action (or 
*	no action) depending on the results, before waiting and repeating this 
*	process.
*/
	void monitorPrint();

/* 
* statusCheck: captures and stores an image from the piCamera, as well as a
*	snapshot of the current model from the correct view. Also checks the status
*	of the photogate and stores it for future use.
*/
	void statusCheck();
/* 
* evaluatePrint: compares the two images to ensure the print is within bounds,
*	and throws an exception if there is a failure detected. Also performs a
*	similar process with the photogate results.
*/
	void evaluatePrint();

/*
* resultHandler: takes the results generated by evaluate print and raises the
*	apropriate exceptions, if any are needed. Also uploads new photo and status
*	to the webserver
*/
	void resultHandler();

private:
	cv::Mat image; //create image object
    raspicam::RaspiCam_Cv Camera; //create camera object
	bool filamentCheck;
	string gcode;
	bool isPrinting;
	model *currModel;
	bool modelCheck;
	int percentComplete;
	webConnect currConnection;
	int totalLines;
	int currLine;
	RAMBoInterface *printerInterface;
	string statusDescr;
/*
* printFailureException: thrown in event of breakaway from the print bed, 
*	stringing, or a molten glob around the extruder. Catch should result in a 
*	full stop of the print job.
*/
	struct printFailureException : public exception {
		const char * what() const throw () {
			return "Print Failure Detected";
		}
	};

/*
* filamentOutException: thrown in the event of a lack of filament passing
*	through the photogate. Catch should result in a pause command being sent to
*	the printer, so that the user can change the filament and continue their
*	printjob without loss of material.
*/
	struct filamentOutException : public exception {
		const char * what() const throw () {
			return "Lack of Fillament Supply Detected";
		}
	};
};

